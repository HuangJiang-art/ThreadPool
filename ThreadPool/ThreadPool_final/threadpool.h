#ifndef THREADPOOL_H
#define THREADPOOL_H
#include<stdio.h>
#include<iostream>
#include<vector>
#include<queue>
#include<memory>
#include<atomic>
#include<mutex>
#include<condition_variable>
#include<functional>
#include<thread>
#include<unordered_map>
#include<future>

const int TASK_MAX_THRESHOLD = 2;//INT32_MAX;
const int THREAD_MAX_THRESHOLD = 100;
const int THREAD_MAX_IDLE_TIME = 60;//单位:s
//线程类型

class Thread
{
public:
	//线程函数对象类型
	using ThreadFunc = std::function<void(int)>;

	Thread(ThreadFunc func)
		:func_(func)
		, threadId_(generateId_++)
	{}

	~Thread() = default;

	//启动线程
	void start()
	{
		//创建一个线程来执行一个线程函数
		std::thread t(func_, threadId_);//C++11 线程对象t 和线程函数func_ 
		t.detach(); //设置分离线程
	}
	int getId()const
	{
		return threadId_;
	}
private:
	ThreadFunc func_;
	static int generateId_;
	int threadId_;//保存线程ID
};
int Thread::generateId_ = 0;

enum class PoolMode//使用时要加上作用域
{
	MODE_FIXED,
	MODE_CACHED,
};


//线程池类型
class ThreadPool
{
public:
	ThreadPool()
	:initThreadSize_(0)
	, taskSize_(0)
	, taskQueMaxThresHold_(TASK_MAX_THRESHOLD)
	, threadSizeThresHold_(THREAD_MAX_THRESHOLD)
	, threadPool_(PoolMode::MODE_FIXED)
	, isStart_(false)
	, idleThreadSize(0)
	, curThreadSize_(0)
	{}//构造
	~ThreadPool()
	{
		isStart_ = false;

		//wait all thread return  阻塞&正在执行任务
		std::unique_lock<std::mutex> lock(taskQueMtx_);
		notEmpty_.notify_all();
		exitCond_.wait(lock, [&]()->bool {return threads_.size() == 0; });//每个线程结束时要notify 否则主线程这里会阻塞
	}//析构
	void start(int initThreadSize = std::thread::hardware_concurrency())
	{
		//设置运行状态
		isStart_ = true;

		//记录初始线程个数
		initThreadSize_ = initThreadSize;
		curThreadSize_ = initThreadSize;
		//创建线程对象

		for (int i = 0; i < initThreadSize_; i++)
		{
			//创建thread对象的时候，把线程函数给到thread对象
			std::unique_ptr<Thread> ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));//括号里面是创建对象时需要的参数
			//threads_.emplace_back(std::move(ptr));
			int threadid = ptr->getId();
			threads_.emplace(threadid, std::move(ptr));
		}

		//启动所有线程
		//std::vector<Thread*> threads_;//线程列表
		for (int i = 0; i < initThreadSize_; i++)
		{
			threads_[i]->start();//需要去执行一个线程函数
			idleThreadSize++;//记录初始空闲线程的数量
		}
	}//开启线程池


	//设置task任务队列上限阈值
	void setTaskQueMaxThresHold(int threshold)
	{
		if (checkRuningState())//如果已经声明过直接返回
		{
			return;
		}
		taskQueMaxThresHold_ = threshold;
	}

	//设置cached模式下线程的上限阈值
	void setThreadSizeThresHold(int threshold)
	{
		if (checkRuningState())
		{
			return;
		}
		if (threadPool_ == PoolMode::MODE_CACHED)
		{
			threadSizeThresHold_ = threshold;
		}
	}

	//使用可变参模版编程，让submitTask可以接收任意任务函数和任意数量的参数
	//返回值future
	template<typename Func, typename... Args>
	auto submitTask(Func&& func, Args&&... args) -> std::future<decltype(func(args...))>
	{
		// 打包任务，放入任务队列里面
		using RType = decltype(func(args...));
		auto task = std::make_shared<std::packaged_task<RType()>>(
			std::bind(std::forward<Func>(func), std::forward<Args>(args)...));//函数对象 参数为()返回值为RType
		std::future<RType> result = task->get_future();

		// 获取锁
		std::unique_lock<std::mutex> lock(taskQueMtx_);
		// 用户提交任务，最长不能阻塞超过1s，否则判断提交任务失败，返回
		if (!notFull_.wait_for(lock, std::chrono::seconds(1),
			[&]()->bool { return taskQue_.size() < (size_t)taskQueMaxThresHold_; }))
		{
			// 表示notFull_等待1s种，条件依然没有满足
			std::cerr << "task queue is full, submit task fail." << std::endl;
			auto task = std::make_shared<std::packaged_task<RType()>>(
				[]()->RType { return RType(); });
			(*task)();//失败也必须得执行 不然会阻塞
			return task->get_future();
		}

		// 如果有空余，把任务放入任务队列中
		// taskQue_.emplace(sp);  
		// using Task = std::function<void()>;
		taskQue_.emplace([task]() {(*task)(); });
		taskSize_++;

		// 因为新放了任务，任务队列肯定不空了，在notEmpty_上进行通知，赶快分配线程执行任务
		notEmpty_.notify_all();

		// cached模式 任务处理比较紧急 场景：小而快的任务 需要根据任务数量和空闲线程的数量，判断是否需要创建新的线程出来
		if (threadPool_ == PoolMode::MODE_CACHED
			&& taskSize_ > idleThreadSize
			&& curThreadSize_ < threadSizeThresHold_)
		{
			std::cout << ">>> create new thread..." << std::endl;

			// 创建新的线程对象
			auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
			int threadId = ptr->getId();
			threads_.emplace(threadId, std::move(ptr));
			// 启动线程
			threads_[threadId]->start();
			// 修改线程个数相关的变量
			curThreadSize_++;
			idleThreadSize++;
		}

		// 返回任务的Result对象
		return result;
	}

	void setMode(PoolMode mode)
	{
		if (checkRuningState())//如果已经声明过直接返回
		{
			return;
		}
		threadPool_ = mode;
	}


	ThreadPool(const ThreadPool&) = delete;
	ThreadPool& operator=(const ThreadPool&) = delete;

private:


	//定义线程函数 
	void threadFunc(int threadid)//具体实现的函数还是由线程池提供的
	{
		auto lastTime = std::chrono::high_resolution_clock().now();//定义一个for循环外的变量
		//线程池里所有任务都要处理完才能结束
		for (;;)
		{
			//std::shared_ptr<Task> task;
			Task task;
			{
				//先获取锁
				std::unique_lock<std::mutex> lock(taskQueMtx_);

				std::cout << "尝试获取任务..." << std::this_thread::get_id() << std::endl;

				//cahched模式下 可能创建了很多线程，但空闲时间超过60s，应该把多余的线程结束回收(超过initThreadSize_数量的线程要回收)
				while (taskQue_.size() == 0)//当任务队列里面没有任务时触发
				{
					if (!isStart_)//线程池结束 回收资源
					{
						//在执行任务后结束
						threads_.erase(threadid);//删除线程对象
						//curThreadSize_--;
						//idleThreadSize--;
						std::cout << "threadid:" << std::this_thread::get_id() << "exit" << std::endl;
						exitCond_.notify_all();
						return;//线程函数结束
					}
					if (threadPool_ == PoolMode::MODE_CACHED)
					{
						//条件变量，超时返回了
						if (std::cv_status::timeout == notEmpty_.wait_for(lock, std::chrono::seconds(1)))
						{
							auto now = std::chrono::high_resolution_clock().now();
							auto dur = std::chrono::duration_cast<std::chrono::seconds>(now - lastTime);
							if (dur.count() >= THREAD_MAX_IDLE_TIME && curThreadSize_ > initThreadSize_)
							{
								//开始回收当前线程
								//记录线程数量的相关变量的值修改
								//把线程对象从线程列表容器中删除
								threads_.erase(threadid);//删除线程对象
								curThreadSize_--;
								idleThreadSize--;
								std::cout << "threadid:" << std::this_thread::get_id() << "exit" << std::endl;
								return;
							}
						}
					}
					else
					{
						//等待notEmpty
						notEmpty_.wait(lock);
					}
				}
				//有任务可以取
				idleThreadSize--;//线程数量少一

				std::cout << "获取任务成功..." << std::this_thread::get_id() << std::endl;
				//从任务队列中取一个任务出来
				task = taskQue_.front();
				taskQue_.pop();
				taskSize_--;

				//如果依然有剩余任务，继续通知其他的线程执行任务
				if (taskQue_.size() > 0)
				{
					notEmpty_.notify_all();
				}

				//取出一个任务 通知等待的生产任务
				notFull_.notify_all();
			}

			//当前线程负责执行这个任务
			if (task != nullptr)
			{
				//task->exec();
				//执行完任务进行通知
				task();//执行function<void()>
			}
			idleThreadSize++;//处理完毕
			lastTime = std::chrono::high_resolution_clock().now(); //更新线程执行完任务的时间
		}
	}

	bool checkRuningState()const
	{
		return isStart_;
	}

private:
	//std::vector<std::unique_ptr<Thread>> threads_;//线程列表
	std::unordered_map<int, std::unique_ptr<Thread>> threads_;//线程列表
	int initThreadSize_;//初始化线程的数量
	std::atomic_int curThreadSize_;//记录当前线程池线程数量
	std::atomic_int idleThreadSize;	//记录空闲线程的数量
	int threadSizeThresHold_;//线程数量的上限阈值

	//Task任务=函数对象
	using Task = std::function<void()>;
	std::queue<Task> taskQue_;//任务队列 用强智能指针可以增加对象的生命周期 New一个
	std::atomic_int taskSize_;//任务的数量
	int taskQueMaxThresHold_;//任务队列数量上线阈值

	std::mutex taskQueMtx_;//保证任务队列的线程安全
	std::condition_variable notFull_;//表示任务队列不满
	std::condition_variable notEmpty_;//表示任务队列不空
	std::condition_variable exitCond_;//等待线程资源全部回收

	PoolMode threadPool_;

	//表示当前线程池的启动状态
	std::atomic_bool isStart_;


};



#endif // !THREADPOOL_H



//#ifndef THREADPOOL_H
//#define THREADPOOL_H
//
//#include <iostream>
//#include <vector>
//#include <queue>
//#include <memory>
//#include <atomic>
//#include <mutex>
//#include <condition_variable>
//#include <functional>
//#include <unordered_map>
//#include <thread>
//#include <future>
//
//const int TASK_MAX_THRESHHOLD = 2; // INT32_MAX;
//const int THREAD_MAX_THRESHHOLD = 1024;
//const int THREAD_MAX_IDLE_TIME = 60; // 单位：秒
//
//
//// 线程池支持的模式
//enum class PoolMode
//{
//	MODE_FIXED,  // 固定数量的线程
//	MODE_CACHED, // 线程数量可动态增长
//};
//
//// 线程类型
//class Thread
//{
//public:
//	// 线程函数对象类型
//	using ThreadFunc = std::function<void(int)>;
//
//	// 线程构造
//	Thread(ThreadFunc func)
//		: func_(func)
//		, threadId_(generateId_++)
//	{}
//	// 线程析构
//	~Thread() = default;
//
//	// 启动线程
//	void start()
//	{
//		// 创建一个线程来执行一个线程函数 pthread_create
//		std::thread t(func_, threadId_);  // C++11来说 线程对象t  和线程函数func_
//		t.detach(); // 设置分离线程   pthread_detach  pthread_t设置成分离线程
//	}
//
//	// 获取线程id
//	int getId()const
//	{
//		return threadId_;
//	}
//private:
//	ThreadFunc func_;
//	static int generateId_;
//	int threadId_;  // 保存线程id
//};
//
//int Thread::generateId_ = 0;
//
//// 线程池类型
//class ThreadPool
//{
//public:
//	// 线程池构造
//	ThreadPool()
//		: initThreadSize_(0)
//		, taskSize_(0)
//		, idleThreadSize_(0)
//		, curThreadSize_(0)
//		, taskQueMaxThreshHold_(TASK_MAX_THRESHHOLD)
//		, threadSizeThreshHold_(THREAD_MAX_THRESHHOLD)
//		, poolMode_(PoolMode::MODE_FIXED)
//		, isPoolRunning_(false)
//	{}
//
//	// 线程池析构
//	~ThreadPool()
//	{
//		isPoolRunning_ = false;
//
//		// 等待线程池里面所有的线程返回  有两种状态：阻塞 & 正在执行任务中
//		std::unique_lock<std::mutex> lock(taskQueMtx_);
//		notEmpty_.notify_all();
//		exitCond_.wait(lock, [&]()->bool {return threads_.size() == 0; });
//	}
//
//	// 设置线程池的工作模式
//	void setMode(PoolMode mode)
//	{
//		if (checkRunningState())
//			return;
//		poolMode_ = mode;
//	}
//
//	// 设置task任务队列上线阈值
//	void setTaskQueMaxThreshHold(int threshhold)
//	{
//		if (checkRunningState())
//			return;
//		taskQueMaxThreshHold_ = threshhold;
//	}
//
//	// 设置线程池cached模式下线程阈值
//	void setThreadSizeThreshHold(int threshhold)
//	{
//		if (checkRunningState())
//			return;
//		if (poolMode_ == PoolMode::MODE_CACHED)
//		{
//			threadSizeThreshHold_ = threshhold;
//		}
//	}
//
//	// 给线程池提交任务
//	// 使用可变参模板编程，让submitTask可以接收任意任务函数和任意数量的参数
//	// pool.submitTask(sum1, 10, 20);   csdn  大秦坑王  右值引用+引用折叠原理
//	// 返回值future<>
//	template<typename Func, typename... Args>
//	auto submitTask(Func&& func, Args&&... args) -> std::future<decltype(func(args...))>
//	{
//		// 打包任务，放入任务队列里面
//		using RType = decltype(func(args...));
//		auto task = std::make_shared<std::packaged_task<RType()>>(
//			std::bind(std::forward<Func>(func), std::forward<Args>(args)...));
//		std::future<RType> result = task->get_future();
//
//		// 获取锁
//		std::unique_lock<std::mutex> lock(taskQueMtx_);
//		// 用户提交任务，最长不能阻塞超过1s，否则判断提交任务失败，返回
//		if (!notFull_.wait_for(lock, std::chrono::seconds(1),
//			[&]()->bool { return taskQue_.size() < (size_t)taskQueMaxThreshHold_; }))
//		{
//			// 表示notFull_等待1s种，条件依然没有满足
//			std::cerr << "task queue is full, submit task fail." << std::endl;
//			auto task = std::make_shared<std::packaged_task<RType()>>(
//				[]()->RType { return RType(); });
//			(*task)();//失败也必须得执行 不然会阻塞
//			return task->get_future();
//		}
//
//		// 如果有空余，把任务放入任务队列中
//		// taskQue_.emplace(sp);  
//		// using Task = std::function<void()>;
//		taskQue_.emplace([task]() {(*task)(); });
//		taskSize_++;
//
//		// 因为新放了任务，任务队列肯定不空了，在notEmpty_上进行通知，赶快分配线程执行任务
//		notEmpty_.notify_all();
//
//		// cached模式 任务处理比较紧急 场景：小而快的任务 需要根据任务数量和空闲线程的数量，判断是否需要创建新的线程出来
//		if (poolMode_ == PoolMode::MODE_CACHED
//			&& taskSize_ > idleThreadSize_
//			&& curThreadSize_ < threadSizeThreshHold_)
//		{
//			std::cout << ">>> create new thread..." << std::endl;
//
//			// 创建新的线程对象
//			auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
//			int threadId = ptr->getId();
//			threads_.emplace(threadId, std::move(ptr));
//			// 启动线程
//			threads_[threadId]->start();
//			// 修改线程个数相关的变量
//			curThreadSize_++;
//			idleThreadSize_++;
//		}
//
//		// 返回任务的Result对象
//		return result;
//	}
//
//	// 开启线程池
//	void start(int initThreadSize = std::thread::hardware_concurrency())
//	{
//		// 设置线程池的运行状态
//		isPoolRunning_ = true;
//
//		// 记录初始线程个数
//		initThreadSize_ = initThreadSize;
//		curThreadSize_ = initThreadSize;
//
//		// 创建线程对象
//		for (int i = 0; i < initThreadSize_; i++)
//		{
//			// 创建thread线程对象的时候，把线程函数给到thread线程对象
//			auto ptr = std::make_unique<Thread>(std::bind(&ThreadPool::threadFunc, this, std::placeholders::_1));
//			int threadId = ptr->getId();
//			threads_.emplace(threadId, std::move(ptr));
//			// threads_.emplace_back(std::move(ptr));
//		}
//
//		// 启动所有线程  std::vector<Thread*> threads_;
//		for (int i = 0; i < initThreadSize_; i++)
//		{
//			threads_[i]->start(); // 需要去执行一个线程函数
//			idleThreadSize_++;    // 记录初始空闲线程的数量
//		}
//	}
//
//	ThreadPool(const ThreadPool&) = delete;
//	ThreadPool& operator=(const ThreadPool&) = delete;
//
//private:
//	// 定义线程函数
//	void threadFunc(int threadid)
//	{
//		auto lastTime = std::chrono::high_resolution_clock().now();
//
//		// 所有任务必须执行完成，线程池才可以回收所有线程资源
//		for (;;)
//		{
//			Task task;
//			{
//				// 先获取锁
//				std::unique_lock<std::mutex> lock(taskQueMtx_);
//
//				std::cout << "tid:" << std::this_thread::get_id()
//					<< "尝试获取任务..." << std::endl;
//
//				// cached模式下，有可能已经创建了很多的线程，但是空闲时间超过60s，应该把多余的线程
//				// 结束回收掉（超过initThreadSize_数量的线程要进行回收）
//				// 当前时间 - 上一次线程执行的时间 > 60s
//
//				// 每一秒中返回一次   怎么区分：超时返回？还是有任务待执行返回
//				// 锁 + 双重判断
//				while (taskQue_.size() == 0)
//				{
//					// 线程池要结束，回收线程资源
//					if (!isPoolRunning_)
//					{
//						threads_.erase(threadid); // std::this_thread::getid()
//						std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
//							<< std::endl;
//						exitCond_.notify_all();
//						return; // 线程函数结束，线程结束
//					}
//
//					if (poolMode_ == PoolMode::MODE_CACHED)
//					{
//						// 条件变量，超时返回了
//						if (std::cv_status::timeout ==
//							notEmpty_.wait_for(lock, std::chrono::seconds(1)))
//						{
//							auto now = std::chrono::high_resolution_clock().now();
//							auto dur = std::chrono::duration_cast<std::chrono::seconds>(now - lastTime);
//							if (dur.count() >= THREAD_MAX_IDLE_TIME
//								&& curThreadSize_ > initThreadSize_)
//							{
//								// 开始回收当前线程
//								// 记录线程数量的相关变量的值修改
//								// 把线程对象从线程列表容器中删除   没有办法 threadFunc《=》thread对象
//								// threadid => thread对象 => 删除
//								threads_.erase(threadid); // std::this_thread::getid()
//								curThreadSize_--;
//								idleThreadSize_--;
//
//								std::cout << "threadid:" << std::this_thread::get_id() << " exit!"
//									<< std::endl;
//								return;
//							}
//						}
//					}
//					else
//					{
//						// 等待notEmpty条件
//						notEmpty_.wait(lock);
//					}
//				}
//
//				idleThreadSize_--;
//
//				std::cout << "tid:" << std::this_thread::get_id()
//					<< "获取任务成功..." << std::endl;
//
//				// 从任务队列种取一个任务出来
//				task = taskQue_.front();
//				taskQue_.pop();
//				taskSize_--;
//
//				// 如果依然有剩余任务，继续通知其它得线程执行任务
//				if (taskQue_.size() > 0)
//				{
//					notEmpty_.notify_all();
//				}
//
//				// 取出一个任务，进行通知，通知可以继续提交生产任务
//				notFull_.notify_all();
//			} // 就应该把锁释放掉
//
//			// 当前线程负责执行这个任务
//			if (task != nullptr)
//			{
//				task(); // 执行function<void()> 
//			}
//
//			idleThreadSize_++;
//			lastTime = std::chrono::high_resolution_clock().now(); // 更新线程执行完任务的时间
//		}
//	}
//
//	// 检查pool的运行状态
//	bool checkRunningState() const
//	{
//		return isPoolRunning_;
//	}
//
//private:
//	std::unordered_map<int, std::unique_ptr<Thread>> threads_; // 线程列表
//
//	int initThreadSize_;  // 初始的线程数量
//	int threadSizeThreshHold_; // 线程数量上限阈值
//	std::atomic_int curThreadSize_;	// 记录当前线程池里面线程的总数量
//	std::atomic_int idleThreadSize_; // 记录空闲线程的数量
//
//	// Task任务 =》 函数对象
//	using Task = std::function<void()>;
//	std::queue<Task> taskQue_; // 任务队列
//	std::atomic_int taskSize_; // 任务的数量
//	int taskQueMaxThreshHold_;  // 任务队列数量上限阈值
//
//	std::mutex taskQueMtx_; // 保证任务队列的线程安全
//	std::condition_variable notFull_; // 表示任务队列不满
//	std::condition_variable notEmpty_; // 表示任务队列不空
//	std::condition_variable exitCond_; // 等到线程资源全部回收
//
//	PoolMode poolMode_; // 当前线程池的工作模式
//	std::atomic_bool isPoolRunning_; // 表示当前线程池的启动状态
//};
//
//#endif
//
